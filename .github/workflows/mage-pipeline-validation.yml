name: Validate Mage.ai Pipeline Configuration

on:
  push:
    paths:
      - 'backend/mage/**'
      - '.github/workflows/mage-pipeline-validation.yml'
  pull_request:
    paths:
      - 'backend/mage/**'
      - '.github/workflows/mage-pipeline-validation.yml'

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/mage

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest mage-ai

      - name: Lint with ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Validate Mage configuration
        run: |
          python -c "
          import os
          import sys
          import yaml
          from mage_ai.data_preparation.models.pipeline import Pipeline
          
          def validate_pipeline_metadata(metadata):
              required_fields = ['blocks', 'name', 'type', 'uuid']
              for field in required_fields:
                  if field not in metadata:
                      raise ValueError(f'Pipeline metadata is missing required field: {field}')
              
              # Validate blocks
              if not metadata['blocks']:
                  raise ValueError('Pipeline must contain at least one block')
              
              # Check for required block types
              block_types = [block.get('type') for block in metadata['blocks']]
              required_types = {'data_loader', 'transformer', 'data_exporter'}
              missing_types = required_types - set(block_types)
              if missing_types:
                  raise ValueError(f'Pipeline is missing required block types: {missing_types}')
              
              # Validate block dependencies
              for block in metadata['blocks']:
                  if 'upstream_blocks' not in block:
                      raise ValueError(f"Block {block.get('name', 'unknown')} is missing upstream_blocks field")
                  if 'downstream_blocks' not in block:
                      raise ValueError(f"Block {block.get('name', 'unknown')} is missing downstream_blocks field")
          
          try:
              # Set up pipeline path
              pipeline_uuid = 'wetlands_pipeline'
              pipeline_path = os.path.join('pipelines', pipeline_uuid)
              
              # Validate pipeline YAML exists
              pipeline_yaml = os.path.join(pipeline_path, 'metadata.yaml')
              if not os.path.exists(pipeline_yaml):
                  print(f'Pipeline metadata.yaml not found at {pipeline_yaml}')
                  sys.exit(1)
                  
              # Load and validate metadata
              with open(pipeline_yaml, 'r') as f:
                  metadata = yaml.safe_load(f)
                  print('Pipeline metadata.yaml is valid YAML')
                  validate_pipeline_metadata(metadata)
                  print('Pipeline metadata structure is valid')
              
              # Try to load the pipeline (this validates the basic structure)
              pipeline = Pipeline.get(pipeline_uuid)
              if not pipeline:
                  print(f'Pipeline {pipeline_uuid} not found')
                  sys.exit(1)
              
              print(f'Pipeline {pipeline_uuid} structure validation passed')
              
          except Exception as e:
              print(f'Validation failed: {str(e)}')
              sys.exit(1)
          "

      - name: Run tests
        run: |
          pytest tests/ -v

  docker:
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend/mage
          push: false
          load: true
          tags: mageai-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Mage.ai in Docker
        run: |
          docker run --rm mageai-test:latest python -c "
          import os
          from mage_ai.data_preparation.models.pipeline import Pipeline
          
          # Test pipeline loading
          pipeline_uuid = 'wetlands_pipeline'
          pipeline = Pipeline.get(pipeline_uuid)
          
          # Just validate the pipeline can be loaded
          print(f'Successfully loaded pipeline: {pipeline_uuid} in Docker')
          " 