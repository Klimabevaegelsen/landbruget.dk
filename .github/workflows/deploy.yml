name: Deploy Mage.ai Pipeline Updates

on:
  push:
    branches:
      - main
    paths:
      - 'backend/mage/**'
      - '.github/workflows/deploy.yml'

env:
  PROJECT_ID: landbrugsdata-1
  REGION: europe-west1
  SERVICE: mage-data-prep
  MAGE_ENVIRONMENT: production

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mage-ai pytest pytest-cov

      - name: Run tests
        working-directory: backend/mage
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --junitxml=test-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend/mage/test-results.xml

      - name: Validate Mage.ai configuration
        working-directory: backend/mage
        run: |
          python -c "
          import os
          import sys
          import yaml
          from mage_ai.orchestration.pipeline_scheduler import PipelineScheduler
          
          try:
              # Set up pipeline path
              pipeline_uuid = 'wetlands_pipeline'
              pipeline_path = os.path.join('pipelines', pipeline_uuid)
              
              # Validate pipeline YAML
              pipeline_yaml = os.path.join(pipeline_path, 'metadata.yaml')
              if os.path.exists(pipeline_yaml):
                  with open(pipeline_yaml, 'r') as f:
                      metadata = yaml.safe_load(f)
                  print('Pipeline metadata.yaml is valid')
              
              # Initialize and validate pipeline
              scheduler = PipelineScheduler(pipeline_uuid)
              scheduler.validate_pipeline()
              print(f'Pipeline {pipeline_uuid} is valid')
              
          except Exception as e:
              print(f'Validation failed: {e}')
              sys.exit(1)
          "

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |
          cd backend/mage
          # Use the same image name as in Terraform
          docker build \
            --build-arg MAGE_ENVIRONMENT=${{ env.MAGE_ENVIRONMENT }} \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Update Cloud Run Service
        run: |
          gcloud run services update ${{ env.SERVICE }} \
            --region ${{ env.REGION }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Test Deployment
        run: |
          # Wait for new revision to be ready
          sleep 30
          DEPLOYED_URL=$(gcloud run services describe ${{ env.SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          curl -s -o /dev/null -w "%{http_code}" $DEPLOYED_URL | grep 200 